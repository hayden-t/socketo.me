{% extends "layout.html.twig" %}

{% import "macros.html.twig" as m %}

{% block title %}Tutorial: Installation{% endblock %}

{% block description %}
  Learn how to easily install Ratchet with Composer
{% endblock %}

{% block body %}
  <div class="container-fluid">
    <div class="row-fluid">

    {{ m.menu() }}

      <div class="span9">
            <h2>Deployment <small>- ship it!</small></h2>

            <section><p>
                You've built your application and are ready to deploy it live!
                This tutorial will give you recommendations on what you should do to setup your production environment to run a WebSocket server. 
                None of these are required, but recommended. 
                Please note this page serves as an introduction and boilerplate setup for each technology; each topic has many more detailed resources available. 
            </p></section>

            <section id="ulimit">
                <h3>Open Connection Limit <a class="headerlink" href="#ulimit" title="Permalink to this headline">¶</a></h3>

                <p>
                    A Unix philosophy is "everything is a file". This means each user connecting to your WebSocket application is represented <em>as</em> a file somewhere. 
                    A security feature of every Unix based OS is to limit the number of file descriptors one running application may have open at a time. 
                    On many systems this default is 1,024. 
                    This would mean if you had 1,024 users currently connected to your WebSocket server anyone else attempting to connect would fail to do so. 
                </p>
                
                <p>
                    Most OS's have many layers of security to prevent applications from opening too many file descriptors. 
                    Here is a great resource on the various ways to <a href="https://rtcamp.com/tutorials/linux/increase-open-files-limit/" rel="external">increase open file limits</a>. 
                </p>

                
                <p>
                    In addition to operating system restrictions the default EventLoop (stream_select) has a hard limit of 1024. You will need to install a new I/O handler as described in the next section.
                </p>
            </section>

            <section id="evented-io-extensions">
                <h3>Evented I/O extensions <a class="headerlink" href="#evented-io-extensions" title="Permalink to this headline">¶</a></h3>

                <p>
                    The <code>libev</code> and <code>libevent</code> projects implement high-performance asynchronous event driven C libraries. 
                    The PHP extensions <a href="https://pecl.php.net/package/ev"><code>ev</code></a> and <a href="https://pecl.php.net/package/event"><code>event</code></a> are available to interface with these libraries.
                    They allow an application to transparently use the best kernel level evented I/O method (<code>select</code>, <code>poll</code>, <code>epoll</code>, <code>kqueue</code>, or event ports) available for the operating system it is running on.
                </p>

                <p>
                    The <code>ev</code> PHP extension bundles the <code>libev</code> C library in its source and requires no prior setup. If you want to use the <code>event</code> PHP extension, you need to first install the <code>libevent</code> library along with its headers for your operating system. For example on Debian/Ubuntu:
                    <pre>$ sudo apt-get install libevent libevent-dev</pre>
                </p>
                
                <p>
                    You may then install the <code>ev</code> or the <code>event</code> extension, either through your preferred package manager, or directly using <code>pecl</code>:
                </p>
                
                <p>
                    <pre>$ sudo pecl install ev</pre>
                    <pre>$ sudo pecl install event</pre>
                </p>
                
                <p>No further setup is necessary; if either of these extensions is present, the evented I/O loop toolkit used by Ratchet will automatically utilize them, which will drastically improve concurrency.</p>
            </section>

            <section id="xdebug">
                <h3>XDebug <a class="headerlink" href="#xdebug" title="Permalink to this headline">¶</a></h3>

                <p>Disable the XDebug extension.  Make sure it is commented out of your php.ini file.  XDebug is fantastic for development, but destroys performance in production.</p>
            </section>

            <section id="server_configuration">
                <h3>Server Configuration <a class="headerlink" href="#server_configuration" title="Permalink to this headline">¶</a></h3>

                <p>There's a few different options when running your WebSocket server along side your website:</p>
                <ul>
                    <li>Run your web site and WebSocket server on the same machine using port 8080 for WebSockets and take the chance client proxies won't block traffic</li>
                    <li>Run your WebSocket server on its own server on port 80 under a subdomain (sock.example.com)</li>
                    <li>Put a reverse proxy (Nginx, HAProxy, Varnish) in front of your web server and WebSocket server</li>
                </ul>

                <p>
                    The first two options are fairly easy with the second being a decent option if you can afford a second server.
                    The third is probably the most standard way to handle this. Most web servers are able to route WebSocket traffic to a running server while still rendering traditional PHP websites. 
                    We felt this approach is now common enough that it didn't need to be specifically documented here. There's now plenty of resources available through search. 
                    Here's a few links to documentation for some of the major proxies:
                </p>

                <ul>
                    <li><a href="http://nginx.org/en/docs/http/websocket.html" rel="external">nginx</a></li>
                    <li>Apache via <a href="https://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html" rel="external">mod_proxy_wstunnel</a></li>
                    <li><a href="https://www.haproxy.com/blog/websockets-load-balancing-with-haproxy/" rel="external">HAProxy</a></li>
                    <li><a href="https://varnish-cache.org/docs/3.0/tutorial/websockets.html" rel="external">Varnish</a></li>
                </ul>

	       </section>

            <section id="supervisor">
                <h3>Supervisor <a class="headerlink" href="#supervisor" title="Permalink to this headline">¶</a></h3>

                <p>
                    When running Ratchet in production it's highly recommended launching it from <a href="http://supervisord.org" target="_blank" rel="external">supervisord</a>.
                    Supervisor is a daemon that launches other processes and ensures they stay running.  
                    If for any reason your long running Ratchet application halted the supervisor daemon would ensure it starts back up immediately.
                    Supervisor can be installed with any of the following tools: pip, easy_install, apt-get, yum. 
                    Once supervisor is installed you generate a template file with the following command:
                </p>

                <pre>$ echo_supervisord_conf > supervisor.conf</pre>

                <p>The following is a modification from the generated supervisor.conf file to run a Ratchet application from the "Hello World" tutorial:</p>

                <p><pre class="prettyprint">[unix_http_server]
file = /tmp/supervisor.sock

[supervisord]
logfile          = ./logs/supervisord.log
logfile_maxbytes = 50MB
logfile_backups  = 10
loglevel         = info
pidfile          = /tmp/supervisord.pid
nodaemon         = false
minfds           = 1024
minprocs         = 200

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl = unix:///tmp/supervisor.sock

[program:ratchet]
command                 = bash -c "ulimit -n 10000; exec /usr/bin/php ./bin/tutorial-terminal-chat.php"
process_name            = Ratchet
numprocs                = 1
autostart               = true
autorestart             = true
user                    = root
stdout_logfile          = ./logs/info.log
stdout_logfile_maxbytes = 1MB
stderr_logfile          = ./logs/error.log
stderr_logfile_maxbytes = 1MB</pre></p>

            <p>If you're only going to use supervisor to run your WebSocket application you can now run it with the command:</p>

            <p><pre>$ sudo supervisord -c supervisor.conf</pre></p>

            </section>

	       <section>
	           <h3>Links</h3>

	           <ul>
	               <li><a href="http://libevent.org" rel="external">libevent</a></li>
	               <li><a href="http://pecl.php.net/package/libevent" rel="external">libevent PHP extension</a></li>
{#
	               <li><a href="http://haproxy.1wt.eu/download/1.5/doc/configuration.txt" rel="external">HAProxy Configuration Manual v1.5</a></li>
	               <li><a href="http://supervisord.org/configuration.html" rel="external">Supervisor Configuration</a></li>
#}
	           </ul>
	       </section>

        </div>
    </div>
{% endblock %}
